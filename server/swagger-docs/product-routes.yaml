openapi: 3.0.0
info:
  title: Product Management API
  description: API for managing products in the system
  version: 1.0.0

tags:
  - name: Products
    description: Product management

paths:
  /api/products:
    get:
      summary: Get all products
      tags: [Products]
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: Search keyword
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: Page number for pagination
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  page:
                    type: integer
                  pages:
                    type: integer
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new product
      tags: [Products]
      security:
        - bearerAuth: [] # This indicates that a bearer token is required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - description
                - image
                - category
                - countInStock
              properties:
                name:
                  type: string
                  description: Product name
                price:
                  type: number
                  description: Product price
                description:
                  type: string
                  description: Product description
                image:
                  type: string
                  description: Product image URL
                category:
                  type: string
                  description: Product category
                countInStock:
                  type: number
                  description: Available quantity in stock
              example:
                name: Sample Product
                price: 99.99
                description: This is a sample product
                image: /images/sample.jpg
                category: Electronics
                countInStock: 10
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Not admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/products/filtered:
    get:
      summary: Get filtered products
      tags: [Products]
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price
        - in: query
          name: sort
          schema:
            type: string
            enum: [newest, price-low-high, price-high-low]
          description: Sort order
      responses:
        200:
          description: List of filtered products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/products/{id}:
    get:
      summary: Get product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      responses:
        200:
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update product
      tags: [Products]
      security:
        - bearerAuth: [] # This indicates that a bearer token is required
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name
                price:
                  type: number
                  description: Product price
                description:
                  type: string
                  description: Product description
                image:
                  type: string
                  description: Product image URL
                category:
                  type: string
                  description: Product category
                countInStock:
                  type: number
                  description: Available quantity in stock
              example:
                name: Updated Product
                price: 89.99
                description: This is an updated product
                image: /images/updated.jpg
                category: Electronics
                countInStock: 15
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Not admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete product
      tags: [Products]
      security:
        - bearerAuth: [] # This indicates that a bearer token is required
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Product ID
      responses:
        200:
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product removed
        401:
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Not admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        description:
          type: string
        image:
          type: string
        category:
          type: string
        countInStock:
          type: number
    Error:
      type: object
      properties:
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Assuming you're using JWT tokens

security:
  - bearerAuth: [] # This applies the bearerAuth security scheme globally to the API
