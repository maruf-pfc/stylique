openapi: 3.0.0
info:
  title: User Authentication API
  description: API for user registration, login, and profile management
  version: 1.0.0

tags:
  - name: Users
    description: User authentication and profile management

paths:
  /api/users/register:
    post:
      summary: Register a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  description: User's name
                email:
                  type: string
                  format: email
                  description: User's email
                password:
                  type: string
                  format: password
                  description: User's password
              example:
                name: John Doe
                email: john@example.com
                password: password123
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  token:
                    type: string
        400:
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/users/login:
    post:
      summary: Login a user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email
                password:
                  type: string
                  format: password
                  description: User's password
              example:
                email: john@example.com
                password: password123
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  isAdmin:
                    type: boolean
                  token:
                    type: string
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/users/profile:
    get:
      summary: Get user profile
      tags: [Users]
      security:
        - bearerAuth: [] # Security scheme reference
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Assuming JWT token for authentication

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
        token:
          type: string
      example:
        _id: 60d21b4667d0d8992e610c85
        name: John Doe
        email: john@example.com
        isAdmin: false
        token: "your-jwt-token"

    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
      example:
        message: Invalid credentials
        code: 401
